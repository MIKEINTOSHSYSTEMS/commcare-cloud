---
# Sets up a PostrgeSQL standby node
# Usage:
#   commcare-cloud <env> ansible-playbook service_playbooks/postgresql/upgrade.yml --limit pg0,pg1 \
#     -e old_version=9.6 -e new_version=12 \
#     [-e old_port=5432 -e new_port=5433]
#
- hosts:
    - all
  any_errors_fatal: true
  become: yes
  vars:
    citus_database: "{{ postgresql_dbs.all | selectattr('host', 'in', groups.get('citusdb_master')) | first }}"
    is_citus: "{{ inventory_hostname in groups.get('citusdb', []) }}"
    target_version: "{{ citus_postgresql_version if is_citus else postgresql_version }}"
    target_port: "{{ citus_postgresql_port if is_citus else postgresql_port }}"
    old_pg_port: "{{ old_port|default(5432) }}"
    new_pg_port: "{{ new_port|default(target_port) }}"
    log_file: "/opt/data/postgresql/pg_upgrade_{{old_version}}_{{new_version}}.log"
    is_standby: "{{ inventory_hostname in groups.get('pg_standby') }}"
    upgrade_command: |
      /usr/lib/postgresql/{{ new_version }}/bin/pg_upgrade
      -b /usr/lib/postgresql/{{ old_version }}/bin -B /usr/lib/postgresql/{{ new_version }}/bin
      -p {{ old_pg_port }} -P {{ new_pg_port }}
      -d /etc/postgresql/{{ old_version }}/main -D /etc/postgresql/{{ new_version }}/main
      --jobs {{ ansible_processor_vcpus }} --link
  vars_files:
    - ../../roles/postgresql_base/defaults/main.yml
  vars_prompt:
    - name: confirm_upgrade
      prompt: |

        ===================================================================================
        Preparing to upgrade PostgreSQL from {{ old_version }} to {{ new_version }}.

        Preflight checklist:

          1. CitusDB upgraded (where applicable)
          2. PostgreSQL vars updated with new version and port
          3. New version of PostgreSQL installed with all dependencies and extensions
          4. All processes that are connecting to the DB have been stopped

        ===================================================================================
        Respond with [y/N]
      private: no
  tasks:
    - assert:
        that: confirm_upgrade == 'y'

    - include_vars:
        file: ../../roles/citusdb/defaults/main.yml
      when: is_citus

    - name: Check PostgreSQL version
      assert:
        that: "{{ new_version }} == {{ target_version }}"
        msg: "Version must be changed in `postgresql.yml` to {{ new_version }}."

    - name: Check upgrade in progress
      stat:
        path: "{{ log_file }}"
      register: log_file_stat
      check_mode: no

    - assert:
        that: "force|default('no') == 'yes' or not log_file_stat.stat.exists"
        msg: "Upgrade log file exists. Run with '-e force=yes' to upgrade anyway."

    - name: Ensure new version is stopped
      service:
        name: "postgresql@{{ new_version}}-main"
        state: stopped

    - name: Remove new version data (v{{ new_version }})
      file:
        path: /opt/data/postgresql/{{ new_version }}/main
        state: absent
      when: not is_standby

    - name: Re-initialize new version DB (v{{ new_version }})
      become: yes
      become_user: postgres
      when: not is_standby
      command: |
        /usr/lib/postgresql/{{ new_version }}/bin/initdb \
        -D /opt/data/postgresql/{{ new_version }}/main/ \
        --lc-collate=C.UTF-8 --lc-ctype=C.UTF-8

    - name: Check upgrade compatability
      become: yes
      become_user: postgres
      command:
        cmd: "{{ upgrade_command }} --check"
        chdir: /opt/data/postgresql
      register: compatibility
      when: not is_standby

    - block:

        - name: Get installed Citus extension version
          become: yes
          become_user: postgres
          shell: psql {{ citus_database.name }} -q  -t -c "select extversion from pg_extension where extname = 'citus';"
          register: citus_ext
          check_mode: no
          when: inventory_hostname not in groups.get('pg_standby', [])

        - name: Check citus version matches installed version
          assert:
            that: citus_ext.stdout | trim is version(citus_version, '>=')
            msg: "Citus version in DB is lower than in environment config: {{ citus_ext.stdout }} < {{ citus_version }}"
          when: inventory_hostname not in groups.get('pg_standby', [])

        # https://github.com/citusdata/citus/pull/4225
        - name: "Clean CitusDB from previous upgrade"
          become: yes
          become_user: postgres
          shell: |
            psql {{ citus_database.name }} -q  -c "
            DROP TABLE IF EXISTS public.pg_dist_partition;
            DROP TABLE IF EXISTS public.pg_dist_shard;
            DROP TABLE IF EXISTS public.pg_dist_placement;
            DROP TABLE IF EXISTS public.pg_dist_node_metadata;
            DROP TABLE IF EXISTS public.pg_dist_node;
            DROP TABLE IF EXISTS public.pg_dist_local_group;
            DROP TABLE IF EXISTS public.pg_dist_transaction;
            DROP TABLE IF EXISTS public.pg_dist_colocation;
            DROP TABLE IF EXISTS public.pg_dist_authinfo;
            DROP TABLE IF EXISTS public.pg_dist_poolinfo;
            DROP TABLE IF EXISTS public.pg_dist_rebalance_strategy;
            "
          when: inventory_hostname in (groups.citusdb_master | difference(groups.get('pg_standby', [])))

        - name: "Prepare CitusDB for upgrade"
          become: yes
          become_user: postgres
          shell: psql {{ citus_database.name }} -q  -c "select citus_prepare_pg_upgrade();"
          when: inventory_hostname in (groups.citusdb_master | difference(groups.get('pg_standby', [])))

      when: is_citus

    - name: Get replication delay (>= v10)
      become: yes
      become_user: postgres
      shell: |
        psql -q  -t \
          -c "select CASE WHEN pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn() THEN 0 ELSE
        GREATEST (0, EXTRACT (EPOCH FROM now() - pg_last_xact_replay_timestamp())) END"
      register: replication_delay_new
      when: old_version is version('10', '>=') and inventory_hostname in groups.get('pg_standby', [])
      check_mode: no

    - name: Get replication delay (< v10)
      become: yes
      become_user: postgres
      shell: |
        psql -q  -t \
          -c "select CASE WHEN pg_last_xlog_receive_location() = pg_last_xlog_replay_location() THEN 0 ELSE
        GREATEST (0, EXTRACT (EPOCH FROM now() - pg_last_xact_replay_timestamp())) END"
      register: replication_delay_old
      when: old_version is version('10', '<') and inventory_hostname in groups.get('pg_standby', [])
      check_mode: no

    - set_fact:
        replication_delay: "{{ replication_delay_old if old_version is version('10', '<') else replication_delay_new }}"

    - name: Check replication delay
      fail:
        msg: "Replication delay is high ({{ replication_delay.stdout | int / 1000 }}s). Aborting."
      when: inventory_hostname in groups.get('pg_standby', []) and replication_delay.stdout | int > 1000

    - name: Stop primaries
      service:
        name: "postgresql@{{ old_version }}-main"
        state: stopped
      when: hot_standby_master is not defined

    - name: Stop standbys
      service:
        name: "postgresql@{{ old_version }}-main"
        state: stopped
      when: hot_standby_master is defined

    - block:
        # Verify standbys are up to date with primaries
        - name: Get primary checkpoint location
          delegate_to: "{{ hot_standby_master }}"
          shell: |
            /usr/lib/postgresql/{{ old_version }}/bin/pg_controldata -D /opt/data/postgresql/{{ old_version }}/main | grep 'Latest checkpoint location' | awk '{ print $4 }'
          register: primary_checkpoint
          check_mode: no

        - name: Get standby checkpoint location
          shell: |
            /usr/lib/postgresql/{{ old_version }}/bin/pg_controldata -D /opt/data/postgresql/{{ old_version }}/main | grep 'Latest checkpoint location' | awk '{ print $4 }'
          register: standby_checkpoint
          check_mode: no

        - debug: msg="Primary = {{ primary_checkpoint.stdout }}, Standby = {{ standby_checkpoint.stdout }}"

        - assert:
            that: "'{{ primary_checkpoint.stdout }}' == '{{ standby_checkpoint.stdout }}'"
            msg: "Primary and standby are out of sync. Wait for the standbys to catch up and then try again."

      rescue:
        - debug: msg="Restarting services"

        - name: Start primaries
          delegate_to: "{{ hot_standby_master }}"
          service:
            name: postgresql
            state: started

        - name: Start standbys
          service:
            name: postgresql
            state: started

        - fail:
            msg: Abort

      when: hot_standby_master is defined

    - name: Remove previous log files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ log_file }}"
        - "/opt/data/postgresql/pg_upgrade_internal.log"
        - "/opt/data/postgresql/pg_upgrade_server.log"
        - "/opt/data/postgresql/pg_upgrade_utility.log"

    - name: Perform upgrade
      become: yes
      become_user: postgres
      shell: "{{ upgrade_command |  replace('\n', ' ') }} | tee {{ log_file }}"
      args:
        chdir: "/opt/data/postgresql"
      when: not ansible_check_mode and not is_standby
      async: 2592000
      poll: 0

    - pause:
        seconds: 0
        prompt: |

          Upgrade commands started. Check {{ log_file }} for progress:

          {% for host in ansible_play_hosts|difference(groups.get('pg_standby', [])) %}
          cchq {{ deploy_env }} ssh {{ host }} -l {{ commcare_cloud_remote_user }} -t sudo tail -f {{ log_file }}
          {% endfor %}

          If there are errors during the upgrade:
            1. DO NOT START ANY SERVICES
            2. Use the 'service_playbooks/postgresql/rollback_upgrade.yml' to roll back the upgrade if necessary

          Once the upgrade processes are complete and successful:
            1. Run the 'service_playbooks/postgresql/upgrade_standbys.yml' playbook to sync
               the standbys with the primaries.
            2. Run the 'service_playbooks/postgresql/finalize_upgrade.yml' to finalize the upgrade.
