---
- include_vars: 'roles/postgresql_base/defaults/main.yml'

- name: check if pg_repack installed
  stat:
    path: "{{ postgres_install_dir }}/bin/pg_repack"
  register: pg_repack_stat

- name: check pg_repack version
  command: "{{ postgres_install_dir }}/bin/pg_repack --version"
  register: pg_repack_installed_version
  when: pg_repack_stat.stat.exists == True
  check_mode: no
  changed_when: False

- debug:
    msg: "Updating pg_repack from version {{ pg_repack_installed_version.stdout.split()[1] }}"
  when: pg_repack_stat.stat.exists and pg_repack_installed_version.stdout.split()[1] != pg_repack_version

- block:
  - name: Download pg_repack
    get_url:
      url: "{{ pg_repack_source }}"
      dest: /tmp/pg_repack.zip

  - name: Unzip pg_repack
    unarchive:
      remote_src: yes
      src: /tmp/pg_repack.zip
      dest: /tmp
      creates: "/tmp/pg_repack-{{ pg_repack_version }}"
    when: not ansible_check_mode

  - name: Install pg_repack
    become: yes
    shell: "PG_CONFIG={{ postgres_install_dir }}/bin/pg_config make install"
    args:
      chdir: "/tmp/pg_repack-{{ pg_repack_version }}"
      creates: "{{ postgres_install_dir }}/bin/pg_repack"
    when: not ansible_check_mode

  - name: Create pg_repack extension
    become: yes
    become_user: postgres
    vars:
      ansible_ssh_pipelining: true
    postgresql_ext:
      name: pg_repack
      db: "{{ item.database }}"
      login_host: "{{ item.host|default('localhost') }}"
      port: "{{ item.port|default(5432) }}"
      login_user: "{{ item.username|default(None) }}"
      login_password: "{{ item.password|default(None) }}"
      version: "{{ pg_repack_version }}"
    loop: "{{ pg_repack.get(inventory_hostname, []) }}"

  - name: Copy Schema permission Queries file
    copy:
      src: schema_permissions.sql
      dest: /tmp/schema_permissions.sql
    register: sql_file_path

  - name: Run queries from SQL script
    postgresql_query:
      db: "{{ item.database }}"
      login_host: "{{ item.host|default('localhost') }}"
      port: "{{ item.port|default(5432) }}"
      login_user: "{{ item.username|default(None) }}"
      login_password: "{{ item.password|default(None) }}"
      path_to_script: "{{ sql_file_path.dest }}"
    register: query_result
    loop: "{{ pg_repack.get(inventory_hostname, []) }}"

- name: Create pg_repack script
  become: yes
  copy:
    src: pg_repack.py
    dest: "{{ pg_repack_script_path }}"
    owner: "postgres"
    group: "postgres"
    mode: 0755

- name: Creating a file with content
  copy:
    dest: "/root/.pgpass_{{ item.database }}"
    mode: "0600"
    content: |
      {{ item.host|default('localhost') }}:{{ item.port|default(5432) }}:{{ item.database }}:{{ item.username|default(None) }}:{{ item.password|default(None) }}
  loop: "{{ pg_repack.get(inventory_hostname, []) }}"

- name: Copy pg_repack execution script
  become: yes
  template:
    src: "pg_repack_cron.sh.j2"
    dest: "/usr/local/sbin/pg_repack_cron_{{ item.database }}.sh"
    owner: "postgres"
    group: "postgres"
    mode: 0755
  loop: "{{ pg_repack.get(inventory_hostname, []) }}"

- name: Create pg_repack cron
  become: yes
  cron:
    name: "pg_repack {{ item.database }}"
    job: "/usr/local/sbin/pg_repack_cron_{{ item.database }}.sh"
    minute: "30"
    hour: "{{ pg_repack_nadir_hour + 2 }}"
    weekday: 5
    user: root
    cron_file: "pg_repack_{{ item.database }}"
  loop: "{{ pg_repack.get(inventory_hostname, []) }}"
