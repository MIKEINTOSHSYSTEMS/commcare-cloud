---

- name: pgbouncer install
  package: name=pgbouncer state=present
  tags:
    - pgbouncer

- name: pgbouncer defaults (classic)
  template: src=pgbouncer-classic.defaults.j2 dest=/etc/default/pgbouncer
  tags:
    - pgbouncer

- name: pgbouncer configuration (classic)
  template: src=pgbouncer-classic.ini.j2 dest=/etc/pgbouncer/pgbouncer.ini
  tags:
    - pgbouncer

- name: pgbouncer gather state
  service_facts:
  tags:
    - pgbouncer
    - configure

- name: pgbouncer restart if running (classic)
  shell: /bin/true
  changed_when: true
  notify: Restart pgbouncer (classic)
  when: ansible_facts.services["pgbouncer"].state == "running"
  tags:
    - pgbouncer

- name: pgbouncer systemd unit install
  template: src=pgbouncer-multiprocess@.service.j2 dest=/etc/systemd/system/pgbouncer-multiprocess@.service
  notify:
   - Reload systemd
   - Restart pgbouncer
  tags:
   - pgbouncer
   - configure

- name: pgbouncer kernel settings
  become: yes
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/99-commcare-cloud.conf
    reload: yes
  with_dict: "{{ pgbouncer_kernel_settings }}"

- name: pgbouncer enumerate current processes
  set_fact:
    pgbouncer_current_processes: "{{ pgbouncer_current_processes | default([]) | union([item.value.name | regex_search('pgbouncer-multiprocess\\@(\\d+)\\.service', '\\1') | first | int]) }}"
  loop: "{{ lookup('dict', ansible_facts.services) }}"
  when: item.key | regex_search('pgbouncer-multiprocess@(\d+)\.service')
  no_log: true
  tags:
    - pgbouncer
    - configure

- name: pgbouncer stop and disable excess processes
  become: yes
  systemd:
    name: "pgbouncer-multiprocess@{{ item }}"
    state: stopped
    enabled: no
  with_sequence: start="{{ pgbouncer_processes + 1 }}" end="{{ pgbouncer_current_processes | max }}"
  when: pgbouncer_current_processes | max > pgbouncer_processes
  ignore_errors: yes
  tags:
    - pgbouncer
    - configure

- name: pgbouncer remove conf for excess processes
  become: yes
  file:
    path: "{{ pgbouncer_ini }}"
    state: absent
  with_sequence: start="{{ pgbouncer_processes + 1 }}" end="{{ pgbouncer_current_processes | max }}"
  when: pgbouncer_current_processes | max > pgbouncer_processes
  ignore_errors: yes
  tags:
    - pgbouncer
    - configure

- name: pgbouncer remove unix socket directory for excess processes
  become: yes
  file:
    path: "{{ pgbouncer_socket_dir }}"
    state: absent
  with_sequence: start="{{ pgbouncer_processes + 1 }}" end="{{ pgbouncer_current_processes | max }}"
  when: pgbouncer_current_processes | max > pgbouncer_processes
  ignore_errors: yes
  tags:
    - pgbouncer
    - configure

- name: pgbouncer create unix socket directory
  become: yes
  file:
    path: "{{ pgbouncer_socket_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '755'
  with_sequence: count="{{ pgbouncer_processes }}"
  tags:
    - pgbouncer
    - configure

- name: pgbouncer configuration
  template: src=pgbouncer.ini.j2 dest="{{ pgbouncer_ini }}"
  notify:
    - Restart pgbouncer
    - Stop and disable pgbouncer (classic)
  with_sequence: count="{{ pgbouncer_processes }}"
  tags:
    - pgbouncer
    - configure

- name: pgbouncer users
  template: src=pgbouncer.users.j2 dest="{{ pgbouncer_users }}"
  notify:
    - Restart pgbouncer
    - Stop and disable pgbouncer (classic)
  tags:
    - pgbouncer
    - configure

## Allows to execute task only when a tag is specified:
## https://serverfault.com/a/748864
- shell: /bin/true
  changed_when: false
  register: no_tags

- name: pgbouncer restart (affect max open files limit)
  command: /bin/true
  notify: Restart pgbouncer
  when: no_tags is not defined
  tags: after-reboot

- name: pgbouncer monit config
  become: yes
  template:
    src: "monit.pgbouncer.j2"
    dest: "/etc/monit/conf.d/pgbouncer"
    group: root
    owner: root
    mode: 0640
  notify: reload monit
  tags: monit

- meta: flush_handlers

- name: pgbouncer monit monitor
  monit:
    name: pgbouncer
    state: monitored
  ignore_errors: "{{ ansible_check_mode }}"
  register: result
  until: not result.failed or 'process not presently configured with monit' not in result.msg
  retries: 5
  delay: 20
  tags: monit

